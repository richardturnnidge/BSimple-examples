# ----------------------------------------------------------------
# libraries to import
# ----------------------------------------------------------------

# in order to compile, these libraries need to be imported:

# standard libraries
import "../lib/startup.i"
import "../lib/stdlib.i"

# custom snake VDP library
import "../lib/snake_vdp_routines.i"

# Note: V12 added colour and simple sound

# ----------------------------------------------------------------
# global variables
# ----------------------------------------------------------------

var snakeHeadX,snakeHeadY;                              # position of snake head
var diffX, diffY;                                       # direction for auto movement
var fruitX, fruitY;                                     # position of fruit
var snakeTailX[1000], snakeTailY[1000];                 # segments of snake - we ignore [0]
var snakeTailLen;                                       # current length of snake
var gameover, canExit;                                  # status flags
var key;                                                # key received
var score;                                              # the score
var screenLeft, screenRight, screenTop, screenBottom;   # constants used for boundary
var lastX, lastY;                                       # previous position


# ----------------------------------------------------------------
# MAIN - has three main loops:
#   1. splash screen
#   2. game play
#   3. game over
# ----------------------------------------------------------------

main()
{
    init();                         # init all vars etc
    drawSplashScreen();             # draw the menu screen

label splash_loop;
    if kbd_is_esc() {
        goto exitHere;
    }
    if kbd_is_S() {
        setupVars();
        goto startGame;
    }
    goto splash_loop;

label startGame;
    inkbg(0);
    ink(15);
    drawGameScreen();               # cls and draw game screen
    gameover = 0;
    canExit = 0;
    makeFruit();                    # create new random fruit

    # we end game by setting the gameover flag

    while gameover == 0 {
        clearSnake();               # erase snake before moving
        checkInput();               # read keyboard
        moveSnakeHead();            # just moves next head position
        if checkSnakeCollide()
        { 
            gameover = 1;
        }
        checkOffScreen();           # have we gone off edge of screen?
        checkFruitEaten();          # have we eaten fruit?
        slitherSnake();             # move snake body
        drawSnake();                # draw snake in new position
        sleepf(10);                 # delay so not too fast

        if kbd_is_esc()             # if we hit ESC we quit application
        {
            gameover = 1;
            canExit = 1;
        }
    }

    # we quit application by setting the canExit flag

    if canExit == 1{
        goto exitHere;
    }
    play_note(0,400,50,400);
    drawGameover();                 # draw game over words on top of game screen


label game_over_loop;
    if kbd_is_esc() {
        goto exitHere;
    }
    if kbd_is_S() {
        setupVars();
        goto startGame;
    }
    goto game_over_loop;            # wait in this loop until key pressed

label exitHere;
    vdp_cursor_mask(0);
    ink(15);
    inkbg(0);
    cls();  

    # game will exit back to MOS here
}


# ----------------------------------------------------------------
# snake movement
# ----------------------------------------------------------------

moveSnakeHead()
{
    # just moves snake head to new position before checking for collisions
    # not drawn yet

    var u,y;

    u = snakeTailLen + 1;
    lastX = snakeHeadX;
    lastY = snakeHeadY;

    snakeHeadX = snakeHeadX + diffX;
    snakeHeadY = snakeHeadY + diffY;

    [snakeTailX -> u] = snakeHeadX;
    [snakeTailY -> u] = snakeHeadY;

}

slitherSnake()
{
    # if no collisions, then head and tail is moved along to new positions

    var u, y;

    for (u=2; u <= snakeTailLen; u = u + 1) {
        y = u -1;
        [snakeTailX -> y] = [snakeTailX -> u];
        [snakeTailY -> y] = [snakeTailY -> u];
    }

    [snakeTailX -> snakeTailLen] = lastX;
    [snakeTailY -> snakeTailLen] = lastY;
}

# ----------------------------------------------------------------
# snake drawing
# ----------------------------------------------------------------

clearSnake()
{
    var u;
    ink(15);
    inkbg(33);
    if snakeTailLen>0
    {
        for (u=1; u <= snakeTailLen; u = u + 1) {
            gotoxy([snakeTailX -> u],[snakeTailY -> u]);
            printf(" ");        
        }
    }
    gotoxy(snakeHeadX, snakeHeadY);
    printf(" ");
}


drawSnake()
{
    var u;
    ink(0);
    inkbg(33);

    if snakeTailLen > 0
    {
        gotoxy([snakeTailX -> 1],[snakeTailY -> 1]);
        printf("|");  
        if snakeTailLen > 1
        {
            for (u=2; u <= snakeTailLen; u = u + 1) {
                gotoxy([snakeTailX -> u],[snakeTailY -> u]);
                printf("^");        
            }
        }
    }
    gotoxy(snakeHeadX, snakeHeadY);
    printf("@");

}

# ----------------------------------------------------------------
# collisions detection
# ----------------------------------------------------------------

# did we eat fruit?

checkFruitEaten()
{
    if snakeHeadX == fruitX {
        if snakeHeadY == fruitY {
        score = score + 1;
        play_note(0,120,500,100);
        newtailSegment();
        }
    }
}

# did we go off screen edges?

checkOffScreen()
{
    if snakeHeadX == screenLeft {
        gameover = 1;
    }
    if snakeHeadX == screenRight {
        gameover = 1;
    }
    if snakeHeadY == screenTop {
        gameover = 1;
    }
    if snakeHeadY ==  screenBottom {
        gameover = 1;
    }
}

# did we collide with our own body?

checkSnakeCollide()
{
    var i;
    if snakeTailLen > 0
    {
        for (i=1; i < snakeTailLen; i = i + 1) 
        {
            if snakeHeadX == [snakeTailX -> i]
            { 
                if snakeHeadY == [snakeTailY -> i]
                {
                    return 1; 
                }
            }
        }
    }
    return 0;
}


# ----------------------------------------------------------------
# fruit eaten
# ----------------------------------------------------------------

# extend sanke by 1 new tail segment

newtailSegment()
{

    var u,y;

    clearSnake();

    if snakeTailLen == 0
    {
        [snakeTailX -> 1] = snakeHeadX; # only needed for first fruit else will be empty
        [snakeTailY -> 1] = snakeHeadY;
    }

    if snakeTailLen == 1
    {
        [snakeTailX -> 2] = snakeHeadX; # only needed for first fruit else will be empty
        [snakeTailY -> 2] = snakeHeadY;
    }

    snakeTailLen = snakeTailLen +1;

    if snakeTailLen > 1
    {    
        for (u=1; u <= snakeTailLen; u = u + 1) {
            y = u - 1;
            [snakeTailX -> y] = [snakeTailX -> u];
            [snakeTailY -> y] = [snakeTailY -> u];
        }
    }

    makeFruit();

}

# replace eaten fruit with a new one

makeFruit()
{
    var i;

    label createPos;

    fruitX = rand_range(screenLeft + 1, screenRight -1);
    fruitY = rand_range(screenTop + 1, screenBottom -1);


    # check that new fruit does not overlap with snake

    for (i=1; i <= snakeTailLen; i = i + 1) 
    {
        if fruitX == [snakeTailX -> i]
        { 
            if fruitY == [snakeTailY -> i]
            {
                goto createPos; 
            }
        }
    }
    
    if fruitX == snakeHeadX
    { 
        if fruitY == snakeHeadY
        {
            goto createPos; 
        }
    }

    drawFruit();
    showScore();

}

# print fruit on screen  

drawFruit()
{
    ink(9);
    inkbg(33);
    gotoxy(fruitX, fruitY);
    printf("+");     
    ink(15);

}

# ----------------------------------------------------------------
# screen drawing
# ----------------------------------------------------------------

drawSplashScreen()
{
    ink(15);
    inkbg(0);
    cls();
    gotoxy(12,4);
    ink(11);
    printf("   Snake Game");
    gotoxy(10,6);

    printf("in B Simple Language");
    gotoxy(12, 12);
    ink(10);
    printf("Press S to Start");
    gotoxy(12, 14);
    ink(9);
    printf(" Or ESC to exit");
    gotoxy(14, 21);
    ink(15);
    printf("Control keys:");
    gotoxy(17, 23);
    printf("Q A O P");
    gotoxy(6, 26);
    printf("Eat fruit. Avoid edge & self");
}

drawGameScreen()
{
    var i,w;
    cls();
    inkbg(33);
    for (i=screenTop;i<=screenBottom;i = i + 1) {
        for (w=screenLeft;w<=screenRight;w = w + 1) {
        gotoxy(w,i);
        printf(" ");        
        }
    }

    inkbg(17);    
    ink(33);
    for (i=screenTop;i<=screenBottom;i = i + 1) {
        gotoxy(screenLeft,i);
        printf("!");        
        gotoxy(screenRight,i);
        printf("!");        
    }
    for (i=screenLeft;i<=screenRight;i = i + 1) {
        gotoxy(i,screenTop);
        printf("!");        
        gotoxy(i,screenBottom);
        printf("!");        
    }
    ink(3);
    inkbg(0);
    gotoxy(12,0);
    printf("^^^@ Snake @^^^");
    ink(11);
    gotoxy(17,0);
    printf("Snake");
    showScore();
}

drawGameover()
{
    gotoxy(12, 10);
    printf("   GAME OVER  ");
    gotoxy(12, 11);
    printf("              ");
    gotoxy(12, 12);
    printf("              ");
    gotoxy(11, 13);
    printf(" Press S to Start ");
    gotoxy(12, 14);
    printf("              ");   
    gotoxy(12, 15);
    printf(" Or ESC to exit ");
    gotoxy(12, 16);
    printf("              "); 
}


# ----------------------------------------------------------------
# keyboard input
# ----------------------------------------------------------------

checkInput()
{
    # check for QAOP inputs and change movement

    if kbd_is_O()
    {
        diffX = - 1;
        diffY = 0;
    }

    if kbd_is_P()
    {
        diffX =  1;
        diffY = 0;
    }

    if kbd_is_Q()
    {
        diffY =  - 1;
        diffX = 0;
    }

    if kbd_is_A()
    {
        diffY = 1;
        diffX = 0;
    }
}

# ----------------------------------------------------------------
# scoring
# ----------------------------------------------------------------

showScore()
{
    ink(15);
    inkbg(0);
    gotoxy(0,0);
    printf("Score: %d  ", score);

}

# ----------------------------------------------------------------
# initial setup
# ----------------------------------------------------------------

init()
{
    vdp_mode(8);                # screen mode (in snake_vdp_routines.i)
    vdp_scaling(0);             # set to non scaled (in snake_vdp_routines.i)
    kbd_init();                 # get keyboard map (in snake_vdp_routines.i)
    set_cursor_mode(0);         # hide cursor (in stdlib.i)
    vdp_cursor_mask(1);         # stop auto scrolling (in snake_vdp_routines.i)

    setupVars();
    setupUDGs();
}

setupVars()
{
    var i;
    for (i=0; i <=100; i = i + 1) 
    {
        [snakeTailX -> i] = 0;
        [snakeTailY -> i] = 0;
    }

    screenLeft = 0;
    screenRight = 39;
    screenTop = 2;
    screenBottom = 29;

    # initial direction reset - move horizontal to the right
    diffY = 0;
    diffX = 1;   

    # random start for snake not too close to the edge
    snakeHeadX = rand_range(screenLeft + 10, screenRight -10);
    snakeHeadY = rand_range(screenTop + 10, screenBottom -10);

    lastX = snakeHeadX;
    lastY = snakeHeadY;

    snakeTailLen = 0;                      
    gameover = 1;
    key = 0;
    score = 0;
    canExit = 0;

}


# ----------------------------------------------------------------
# Other VDP functions and UDG chars
# ----------------------------------------------------------------

ink(colour)
{
    putc(17);
    putc(colour);
}
inkbg(colour)
{
    putc(17);
    putc(colour + 128);
}

setupUDGs()
{
    putc(23);                       # define new UDG
    putc('@');                      # @ is head
    putc(parse_bin("00111100"));    # 8 bytes of data
    putc(parse_bin("01111110"));
    putc(parse_bin("11011011"));
    putc(parse_bin("11111111"));
    putc(parse_bin("11111111"));
    putc(parse_bin("11100111"));
    putc(parse_bin("01111110"));
    putc(parse_bin("00111100"));
    
    putc(23);
    putc('^');                      # body
    putc(parse_bin("00000000"));
    putc(parse_bin("00011000"));
    putc(parse_bin("00111100"));
    putc(parse_bin("01111110"));
    putc(parse_bin("01111110"));
    putc(parse_bin("00111100"));
    putc(parse_bin("00011000"));
    putc(parse_bin("00000000"));
    
    putc(23);
    putc('|');                      # tailend
    putc(parse_bin("00000000"));
    putc(parse_bin("00000000"));
    putc(parse_bin("00011000"));
    putc(parse_bin("00111100"));
    putc(parse_bin("00111100"));
    putc(parse_bin("00011000"));
    putc(parse_bin("00000000"));
    putc(parse_bin("00000000"));
    
    putc(23); 
    putc('+');                      # fruit
    putc(parse_bin("00011000"));
    putc(parse_bin("00001000"));
    putc(parse_bin("01110110"));
    putc(parse_bin("11111111"));
    putc(parse_bin("11111111"));
    putc(parse_bin("11111111"));
    putc(parse_bin("01111010"));
    putc(parse_bin("00110100"));
    
    putc(23); 
    putc('!');                      # grass edges
    putc(parse_bin("00010001"));
    putc(parse_bin("01000100"));
    putc(parse_bin("00010001"));
    putc(parse_bin("01000100"));
    putc(parse_bin("00010001"));
    putc(parse_bin("01000100"));
    putc(parse_bin("00010001"));
    putc(parse_bin("01000100"));
    
}



